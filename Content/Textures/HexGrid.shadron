// Created by inigo quilez - iq/2014
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

#define AA 1

#define width 0.8660254037844386467637231707529361834714026269051903140279034897
#define hexHeight 9

// { 2d cell id, distance to border, distnace to center )
vec4 hexagon( vec2 p ) 
{
	vec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );
	
	vec2 pi = floor(q);
	vec2 pf = fract(q);

	float v = mod(pi.x + pi.y, 3.0);

	float ca = step(1.0,v);
	float cb = step(2.0,v);
	vec2  ma = step(pf.xy,pf.yx);
	
    // distance to borders
	float e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );

	// distance to center	
	p = vec2( q.x + floor(0.5+p.y/1.5), 4.0*p.y/3.0 )*0.5 + 0.5;
	float f = length( (fract(p) - 0.5)*vec2(1.0,width) );		
	
	return vec4( pi + ca - cb*ma, e, f );
}

float hash1( vec2  p ) { 
	float n = dot(p,vec2(127.1,311.7) ); 
	return fract(sin(n)*43758.5453); 
}

float noise( in vec3 x )
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f*f*(3.0-2.0*f);
	vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;
	//vec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 ).yx;
	return hash1(uv);
}


vec4 mainImage(in vec2 fragCoord ) 
{
	vec3 tot = vec3(0.0);
	fragCoord *= shadron_Dimensions;

	#if AA>1
		for( int mm=0; mm<AA; mm++ )
		for( int nn=0; nn<AA; nn++ )
		{
			vec2 off = vec2(mm,nn)/float(AA);
			vec2 uv = (fragCoord+off)/shadron_Dimensions.xy;
			vec2 pos = (-shadron_Dimensions.xy + 2.0*(fragCoord+off))/shadron_Dimensions.y;
	#else    
		{
			vec2 uv = fragCoord/shadron_Dimensions.xy;
			vec2 pos = (-shadron_Dimensions.xy + 2.0*fragCoord)/shadron_Dimensions.y;
	#endif
			// gray
			vec4 h = hexagon(hexHeight*pos + 0.5*shadron_Time);
			vec3 col = vec3(h.z);

			tot += col;
		}
 	#if AA>1
    tot /= float(AA*AA);
	#endif
        
	return vec4( tot, 1.0 );
}

image HexGrid = glsl(mainImage, 1024 * width * ((hexHeight+1)/hexHeight), 1024);